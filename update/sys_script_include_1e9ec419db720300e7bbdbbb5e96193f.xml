<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_attme_engr_strat.searchDispatchAssociatedPO</api_name>
        <client_callable>true</client_callable>
        <description>Este script include es usado en el client script "DSP search PO in purchase requisition", dada una "PO asociada" en una dispatch request se busca la purchase requisition que posee dicha "PO asociada".</description>
        <name>searchDispatchAssociatedPO</name>
        <script><![CDATA[var searchDispatchAssociatedPO = Class.create();
searchDispatchAssociatedPO.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	
	getAssociatedPO: function() {
		
		var associated_po = this.getParameter('sysparm_associated_po');
		var dsp_sys_id = this.getParameter('sysparm_dsp_sys_id');
		var encoded_query = "po_hardware=" +associated_po+ "^ORpo_software=" +associated_po+ "^ORpo_installation_service=" +associated_po+ "^ORpo_configuration_integration_service=" +associated_po+ "^ORpo_others=" + associated_po;
		var prq_number;
		var prq_sys_id;
		var prq_short_description;
		
		//buscamos en todas las purchase requisiton la "po asociada" en todos los campos de ordenes de compra por medio del enconded query definido anteriormente, se ordena de la orden de compra más reciente, se limita a un solo resultado ya que no se espera que una PO se encuentre en más de un registro de purchase requisition
		var prq =  new GlideRecord('x_attme_engr_strat_purchase_requisition');
		prq.addEncodedQuery(encoded_query);
		prq.orderByDesc('opened_at');
		prq.setLimit(1);
		prq.query();
		
		var prq_row_count = prq.getRowCount();
		
		//si encontramos una purchase requisition con la PO asociada
		if(prq_row_count == 1)
		{
			if(prq.next())
			{
				prq_number = prq.number;
				prq_sys_id = prq.sys_id;
				prq_short_description = prq.short_description;
				
				//Asociamos la purchase requisition encontrada con la dispatch requisition
				var dsp = new GlideRecord('x_attme_engr_strat_dispatch_request');
				dsp.addQuery('sys_id', dsp_sys_id);
				dsp.query();
				
				if(dsp.next())
				{
					dsp.parent = prq_sys_id;
					dsp.purchase_requisition = prq_sys_id;
					dsp.update();
				}
			}
		}
		
		if(prq_row_count == 0)
		{
		     var dsp2 = new GlideRecord('x_attme_engr_strat_dispatch_request');
				dsp2.addQuery('sys_id', dsp_sys_id);
				dsp2.query();
				
				if(dsp2.next())
				{
					dsp2.parent = '';
					dsp2.purchase_requisition = '';
					dsp2.update();
				}
			
		}
			
		
		var result = this.newItem("result");
		result.setAttribute("prq_number", prq_number);
		result.setAttribute("prq_short_description", prq_short_description);
		
	},
	
	
	type: 'searchDispatchAssociatedPO'
});]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>hugo.ruano</sys_created_by>
        <sys_created_on>2017-12-01 17:37:53</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_id>1e9ec419db720300e7bbdbbb5e96193f</sys_id>
        <sys_mod_count>3</sys_mod_count>
        <sys_name>searchDispatchAssociatedPO</sys_name>
        <sys_package display_value="Engineering Strategy" source="x_attme_engr_strat">8fcb836cdb4e034028f3d5ab5e961972</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Engineering Strategy">8fcb836cdb4e034028f3d5ab5e961972</sys_scope>
        <sys_update_name>sys_script_include_1e9ec419db720300e7bbdbbb5e96193f</sys_update_name>
        <sys_updated_by>hugo.ruano</sys_updated_by>
        <sys_updated_on>2017-12-01 18:08:27</sys_updated_on>
    </sys_script_include>
</record_update>
