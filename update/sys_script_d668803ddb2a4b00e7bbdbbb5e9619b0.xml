<?xml version="1.0" encoding="UTF-8"?>
<record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_attme_engr_strat_purchase_requisition</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_attme_engr_strat_purchase_requisition">expense_type=Opex^EQ<item endquery="false" field="expense_type" goto="false" newquery="false" operator="=" or="false" value="Opex"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>PRQ calculate aging information (Opex)</name>
        <order>110</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {
	//La presente business rule calcula las duraciones entre las fechas de solicitud y entrega de los documentos para una compra OPEX
	
	//Nota:Esta business rule hace uso del schedule "Capex/opex mgmt. Mon-Fri 24 hours schedule"
	
	var schedule = gs.getProperty('x_attme_engr_strat.scheduleCapexOpexMgmtMonFri24Hours');
	var sched = new GlideSchedule(schedule, 'Mexico/General');
	
	var offset_6_hours = new GlideTime();
	offset_6_hours.setValue("06:00:00");
	var offset_24_hours = new GlideTime();
	offset_24_hours.setValue("24:00:00");
	
	//calculo de la duración de la entrega del OP
	//Se valida que los campos de fecha de solicitud y entrega del OP tengan información
	if(!current.op_request_date.nil() && !current.op_delivery_date.nil())
		{
		var op_request_date = current.op_request_date + " 12:00:00";
		var op_delivery_date = current.op_delivery_date + " 12:00:00";
		var op_request_date_glide = new GlideDateTime(op_request_date);
		var op_delivery_date_glide = new GlideDateTime(op_delivery_date);
		var op_request_day_week = op_request_date_glide.getDayOfWeekUTC();
		var op_delivery_day_week = op_delivery_date_glide.getDayOfWeekUTC();
		var op_dur = new GlideDuration();
		
		if(op_request_day_week == 6 || op_request_day_week == 7)
			{
			op_delivery_date_glide.subtract(offset_6_hours);
			op_dur = sched.duration(op_request_date_glide, op_delivery_date_glide);
			current.op_requested_to_delivered_duration = op_dur.getDurationValue();
		}
		
		if(op_delivery_day_week == 6 || op_delivery_day_week == 7)
			{
			op_delivery_date_glide.subtract(offset_24_hours);
			op_dur = sched.duration(op_request_date_glide, op_delivery_date_glide);
			current.op_requested_to_delivered_duration = op_dur.getDurationValue();
		}
		
		else
			{
			op_dur = sched.duration(op_request_date_glide, op_delivery_date_glide);
			current.op_requested_to_delivered_duration = op_dur.getDurationValue();
		}
		
	}
	
	//En el caso de que las fechas de solicitud y entrega del OP se encuentren vacías
	else
		{
		    current.op_requested_to_delivered_duration = "0 00:00:00";
	}
	
	
	
	//calculo de la duración de la entrega del PR
	//Se valida que los campos de fecha de solicitud y entrega del PR tengan información
	if(!current.pr_request_date.nil() && !current.pr_delivery_date.nil())
		{
		var pr_request_date = current.pr_request_date + " 12:00:00";
		var pr_delivery_date = current.pr_delivery_date + " 12:00:00";
		var pr_request_date_glide = new GlideDateTime(pr_request_date);
		var pr_delivery_date_glide = new GlideDateTime(pr_delivery_date);
		var pr_request_day_week = pr_request_date_glide.getDayOfWeekUTC();
		var pr_delivery_day_week = pr_delivery_date_glide.getDayOfWeekUTC();
		var pr_dur = new GlideDuration();
		
		if(pr_request_day_week == 6 || pr_request_day_week == 7)
			{
			pr_delivery_date_glide.subtract(offset_6_hours);
			pr_dur = sched.duration(pr_request_date_glide, pr_delivery_date_glide);
			current.pr_requested_to_delivered_duration = pr_dur.getDurationValue();
		}
		
		if(pr_delivery_day_week == 6 || pr_delivery_day_week == 7)
			{
			pr_delivery_date_glide.subtract(offset_24_hours);
			pr_dur = sched.duration(pr_request_date_glide, pr_delivery_date_glide);
			current.pr_requested_to_delivered_duration = pr_dur.getDurationValue();
		}
		
		else
			{
			pr_dur = sched.duration(pr_request_date_glide, pr_delivery_date_glide);
			current.pr_requested_to_delivered_duration = pr_dur.getDurationValue();
		}
		
	}
	
	//En el caso de que las fechas de solicitud y entrega del PR se encuentren vacías
	else
		{
		    current.pr_requested_to_delivered_duration = "0 00:00:00";
	}
	
	
	
	//calculo de la duración de la entrega del RFQ
	//Se valida que los campos de fecha de solicitud y entrega del RFQ tengan información
	if(!current.rfq_request_date.nil() && !current.rfq_delivery_date.nil())
		{
		var rfq_request_date = current.rfq_request_date + " 12:00:00";
		var rfq_delivery_date = current.rfq_delivery_date + " 12:00:00";
		var rfq_request_date_glide = new GlideDateTime(rfq_request_date);
		var rfq_delivery_date_glide = new GlideDateTime(rfq_delivery_date);
		var rfq_request_day_week = rfq_request_date_glide.getDayOfWeekUTC();
		var rfq_delivery_day_week = rfq_delivery_date_glide.getDayOfWeekUTC();
		var rfq_dur = new GlideDuration();
		
		if(rfq_request_day_week == 6 || rfq_request_day_week == 7)
			{
			rfq_delivery_date_glide.subtract(offset_6_hours);
			rfq_dur = sched.duration(rfq_request_date_glide, rfq_delivery_date_glide);
			current.rfq_requested_to_delivered_duration = rfq_dur.getDurationValue();
		}
		
		if(rfq_delivery_day_week == 6 || rfq_delivery_day_week == 7)
			{
			rfq_delivery_date_glide.subtract(offset_24_hours);
			rfq_dur = sched.duration(rfq_request_date_glide, rfq_delivery_date_glide);
			current.rfq_requested_to_delivered_duration = rfq_dur.getDurationValue();
		}
		
		else
			{
			rfq_dur = sched.duration(rfq_request_date_glide, rfq_delivery_date_glide);
			current.rfq_requested_to_delivered_duration = rfq_dur.getDurationValue();
		}
		
	}
	
	//En el caso de que las fechas de solicitud y entrega del RFQ se encuentren vacías
	else
		{
		    current.rfq_requested_to_delivered_duration = "0 00:00:00";
	}
	
	
	//calculo de la duración de la entrega del SOCA
	//Se valida que los campos de fecha de solicitud y entrega del RFQ tengan información
	if(!current.soca_request_date.nil() && !current.soca_delivery_date.nil())
		{
		var soca_request_date = current.soca_request_date + " 12:00:00";
		var soca_delivery_date = current.soca_delivery_date + " 12:00:00";
		var soca_request_date_glide = new GlideDateTime(soca_request_date);
		var soca_delivery_date_glide = new GlideDateTime(soca_delivery_date);
		var soca_request_day_week = soca_request_date_glide.getDayOfWeekUTC();
		var soca_delivery_day_week = soca_delivery_date_glide.getDayOfWeekUTC();
		var soca_dur = new GlideDuration();
		
		if(soca_request_day_week == 6 || soca_request_day_week == 7)
			{
			soca_delivery_date_glide.subtract(offset_6_hours);
			soca_dur = sched.duration(soca_request_date_glide, soca_delivery_date_glide);
			current.soca_requested_to_delivered_duration = soca_dur.getDurationValue();
		}
		
		if(soca_delivery_day_week == 6 || soca_delivery_day_week == 7)
			{
			soca_delivery_date_glide.subtract(offset_24_hours);
			soca_dur = sched.duration(soca_request_date_glide, soca_delivery_date_glide);
			current.soca_requested_to_delivered_duration = soca_dur.getDurationValue();
		}
		
		else
			{
			soca_dur = sched.duration(soca_request_date_glide, soca_delivery_date_glide);
			current.soca_requested_to_delivered_duration = soca_dur.getDurationValue();
		}
		
	}
	
	//En el caso de que las fechas de solicitud y entrega de la SOCA se encuentren vacías
	else
		{
		    current.soca_requested_to_delivered_duration = "0 00:00:00";
	}
	
	//calculo de la duración de la entrega del OCA
	//Se valida que los campos de fecha de solicitud y entrega del RFQ tengan información
	if(!current.oca_request_date.nil() && !current.oca_delivery_date.nil())
		{
		var oca_request_date = current.oca_request_date + " 12:00:00";
		var oca_delivery_date = current.oca_delivery_date + " 12:00:00";
		var oca_request_date_glide = new GlideDateTime(oca_request_date);
		var oca_delivery_date_glide = new GlideDateTime(oca_delivery_date);
		var oca_request_day_week = oca_request_date_glide.getDayOfWeekUTC();
		var oca_delivery_day_week = oca_delivery_date_glide.getDayOfWeekUTC();
		var oca_dur = new GlideDuration();
		
		if(oca_request_day_week == 6 || oca_request_day_week == 7)
			{
			oca_delivery_date_glide.subtract(offset_6_hours);
			oca_dur = sched.duration(oca_request_date_glide, oca_delivery_date_glide);
			current.oca_requested_to_delivered_duration = oca_dur.getDurationValue();
		}
		
		if(oca_delivery_day_week == 6 || oca_delivery_day_week == 7)
			{
			oca_delivery_date_glide.subtract(offset_24_hours);
			oca_dur = sched.duration(oca_request_date_glide, oca_delivery_date_glide);
			current.oca_requested_to_delivered_duration = oca_dur.getDurationValue();
		}
		
		else
			{
			oca_dur = sched.duration(oca_request_date_glide, oca_delivery_date_glide);
			current.oca_requested_to_delivered_duration = oca_dur.getDurationValue();
		}
		
	}
	
	//En el caso de que las fechas de solicitud y entrega de la OCA se encuentren vacías
	else
		{
		    current.oca_requested_to_delivered_duration = "0 00:00:00";
	}
	
})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>hugo.ruano</sys_created_by>
        <sys_created_on>2017-11-20 19:56:56</sys_created_on>
        <sys_customer_update>true</sys_customer_update>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>d668803ddb2a4b00e7bbdbbb5e9619b0</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>PRQ calculate aging information (Opex)</sys_name>
        <sys_overrides/>
        <sys_package display_value="Engineering Strategy" source="x_attme_engr_strat">8fcb836cdb4e034028f3d5ab5e961972</sys_package>
        <sys_policy/>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Engineering Strategy">8fcb836cdb4e034028f3d5ab5e961972</sys_scope>
        <sys_update_name>sys_script_d668803ddb2a4b00e7bbdbbb5e9619b0</sys_update_name>
        <sys_updated_by>hugo.ruano</sys_updated_by>
        <sys_updated_on>2017-11-29 18:48:07</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=d668803ddb2a4b00e7bbdbbb5e9619b0"/>
</record_update>
